{
  "address": "0x690F4DCb7B5bdbf9D78afA7aEe05026657090a1A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc414ac630d4f3a8a4ac12094c9d59bfa34017185f8dfacfcff02df4b9704112a",
  "receipt": {
    "to": null,
    "from": "0xed61c43C6a7D4cE30D8Abf345520E185FCfA75Eb",
    "contractAddress": "0x690F4DCb7B5bdbf9D78afA7aEe05026657090a1A",
    "transactionIndex": 10,
    "gasUsed": "1028855",
    "logsBloom": "0x
    "blockHash": "0xa32dedeb28a7a09a91166e79c5c17b30bdbae0e8b2f0d9fa83d9b316cf7f6414",
    "transactionHash": "0xc414ac630d4f3a8a4ac12094c9d59bfa34017185f8dfacfcff02df4b9704112a",
    "logs": [],
    "blockNumber": 3911418,
    "cumulativeGasUsed": "2872090",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 3,
  "solcInputHash": "09af8c6f6ce451cb540958ed9bc6ecc5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Get funds from users\\n// Withdraw funds\\n//Set a minimum funding value in USD\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n// \\\"constant\\\" keyword and \\\"immutable\\\" keyword help to reduce gas\\n\\nerror FundMe__NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    address private immutable i_owner;\\n\\n    AggregatorV3Interface public s_priceFeed;\\n\\n    // constructor function is the function that automatically gets called when we deploy our contract\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        // Want to be able to set a minimum fund amount in USD\\n        //1. how do we send ETh to this contract?\\n        //Payable keywird is added to the function to make it fir to transact funds\\n\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough\\\"\\n        ); // 1e18 == 1*10 **18 == 1000000000000000000\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        //msg.value is going to have 18 decimal places\\n        // require keyword is a checker, it says: is msg.value greater than 1? if not it will revert and send the red message\\n        // What is reverting?\\n        // Undo any action before, and send remaining gas back\\n    }\\n\\n    // the code in the comment below is used to get the get the version of interfaces\\n    // function getVersion() public view returns (uint256) {\\n    //     // ETH/USD price feed address of Sepolia Network.\\n    //     AggregatorV3Interface s_priceFeed = AggregatorV3Interface(\\n    //         0x694AA1769357215DE4FAC081bf1f309aDC325306\\n    //     );\\n    //     return s_priceFeed.version();\\n    // }\\n\\n    function withdraw() public {\\n        //for loop\\n        //[1, 2, 3, 4]\\n        /* starting index, ending index, step amount*/\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            //code\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0); // this is to reset the array\\n        /*\\n        now to actually withdraw the funds\\n        //transfer,\\n        //msg.sender = address\\n        //payable(msg.sender) = payable address\\n        payable(msg.sender).transfer(address(this).balance);\\n\\n        //send\\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);  \\n        require(sendSuccess, \\\"Send failed\\\"); */\\n\\n        //call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        //mappings can't be in memory\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    modifier onlyOwner() {\\n        //require(msg.sender == i_owner, \\\"Sender is not Owner!\\\");\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        } // this also saves gas\\n        _;\\n    }\\n\\n    // what if someone sends this contract ETH without calling the fund function?\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x4eb34fefd65c0de985ab28a9e5faabbeaab3d3b401e98275d4d9275a3c76a331\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // we are going to need two things\\n        // the ABI and\\n        // the address 0x447Fd5eC2D383091C22B8549cb231a3bAD6d3fAf\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0x447Fd5eC2D383091C22B8549cb231a3bAD6d3fAf\\n        // );\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // ETH in terms of USD\\n        return uint256(price * 1e10); // 1**10 == 10000000000\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x5e643edddc48c132d50f15f8fee6089b84b74da82d8c8f106d6c8f5237edde30\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012ba380380620012ba833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c61113b6200017f6000396000818161056a015281816105ba01526107b0015261113b6000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101b757610099565b80630343fb25146100a35780630ec3b027146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b36610099576100976101f4565b005b6100a16101f4565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610a73565b61032f565b6040516100d79190610ab9565b60405180910390f35b3480156100ec57600080fd5b506100f5610378565b6040516101029190610b33565b60405180910390f35b34801561011757600080fd5b5061012061039e565b005b34801561012e57600080fd5b50610137610559565b6040516101449190610ab9565b60405180910390f35b34801561015957600080fd5b50610162610566565b60405161016f9190610b5d565b60405180910390f35b34801561018457600080fd5b5061018d61058e565b60405161019a9190610b33565b60405180910390f35b6101ab6101f4565b005b6101b56105b8565b005b3480156101c357600080fd5b506101de60048036038101906101d99190610ba4565b610846565b6040516101eb9190610b5d565b60405180910390f35b6802b5e3af16b1880000610233600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461088d90919063ffffffff16565b1015610274576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026b90610c2e565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103269190610c7d565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005b6000805490508110156104495760008082815481106103c3576103c2610cd3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044190610d02565b9150506103a1565b50600067ffffffffffffffff81111561046557610464610d4b565b5b6040519080825280602002602001820160405280156104935781602001602082028036833780820191505090505b50600090805190602001906104a9929190610969565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104d090610dab565b60006040518083038185875af1925050503d806000811461050d576040519150601f19603f3d011682016040523d82523d6000602084013e610512565b606091505b5050905080610556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054d90610e0c565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063d576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106c057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610676575b5050505050905060005b815181101561074b5760008282815181106106e8576106e7610cd3565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074390610d02565b9150506106ca565b50600067ffffffffffffffff81111561076757610766610d4b565b5b6040519080825280602002602001820160405280156107955781602001602082028036833780820191505090505b50600090805190602001906107ab929190610969565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107f290610dab565b60006040518083038185875af1925050503d806000811461082f576040519150601f19603f3d011682016040523d82523d6000602084013e610834565b606091505b505090508061084257600080fd5b5050565b600080828154811061085b5761085a610cd3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610899836108c9565b90506000670de0b6b3a764000085836108b29190610e2c565b6108bc9190610eb5565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561091257600080fd5b505afa158015610926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094a9190610f73565b5050509150506402540be400816109619190610fee565b915050919050565b8280548282559060005260206000209081019282156109e2579160200282015b828111156109e15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610989565b5b5090506109ef91906109f3565b5090565b5b80821115610a0c5760008160009055506001016109f4565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4082610a15565b9050919050565b610a5081610a35565b8114610a5b57600080fd5b50565b600081359050610a6d81610a47565b92915050565b600060208284031215610a8957610a88610a10565b5b6000610a9784828501610a5e565b91505092915050565b6000819050919050565b610ab381610aa0565b82525050565b6000602082019050610ace6000830184610aaa565b92915050565b6000819050919050565b6000610af9610af4610aef84610a15565b610ad4565b610a15565b9050919050565b6000610b0b82610ade565b9050919050565b6000610b1d82610b00565b9050919050565b610b2d81610b12565b82525050565b6000602082019050610b486000830184610b24565b92915050565b610b5781610a35565b82525050565b6000602082019050610b726000830184610b4e565b92915050565b610b8181610aa0565b8114610b8c57600080fd5b50565b600081359050610b9e81610b78565b92915050565b600060208284031215610bba57610bb9610a10565b5b6000610bc884828501610b8f565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610c18601283610bd1565b9150610c2382610be2565b602082019050919050565b60006020820190508181036000830152610c4781610c0b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c8882610aa0565b9150610c9383610aa0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cc857610cc7610c4e565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d0d82610aa0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d4057610d3f610c4e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d95600083610d7a565b9150610da082610d85565b600082019050919050565b6000610db682610d88565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610df6600b83610bd1565b9150610e0182610dc0565b602082019050919050565b60006020820190508181036000830152610e2581610de9565b9050919050565b6000610e3782610aa0565b9150610e4283610aa0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e7b57610e7a610c4e565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ec082610aa0565b9150610ecb83610aa0565b925082610edb57610eda610e86565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f0581610ee6565b8114610f1057600080fd5b50565b600081519050610f2281610efc565b92915050565b6000819050919050565b610f3b81610f28565b8114610f4657600080fd5b50565b600081519050610f5881610f32565b92915050565b600081519050610f6d81610b78565b92915050565b600080600080600060a08688031215610f8f57610f8e610a10565b5b6000610f9d88828901610f13565b9550506020610fae88828901610f49565b9450506040610fbf88828901610f5e565b9350506060610fd088828901610f5e565b9250506080610fe188828901610f13565b9150509295509295909350565b6000610ff982610f28565b915061100483610f28565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561104357611042610c4e565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110805761107f610c4e565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110bd576110bc610c4e565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110fa576110f9610c4e565b5b82820290509291505056fea2646970667358221220b113a6a7c7971e7b2248ce2e4bd0d102b263d5c8c42a487c4cbc6f6e3c60488a64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101b757610099565b80630343fb25146100a35780630ec3b027146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b36610099576100976101f4565b005b6100a16101f4565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610a73565b61032f565b6040516100d79190610ab9565b60405180910390f35b3480156100ec57600080fd5b506100f5610378565b6040516101029190610b33565b60405180910390f35b34801561011757600080fd5b5061012061039e565b005b34801561012e57600080fd5b50610137610559565b6040516101449190610ab9565b60405180910390f35b34801561015957600080fd5b50610162610566565b60405161016f9190610b5d565b60405180910390f35b34801561018457600080fd5b5061018d61058e565b60405161019a9190610b33565b60405180910390f35b6101ab6101f4565b005b6101b56105b8565b005b3480156101c357600080fd5b506101de60048036038101906101d99190610ba4565b610846565b6040516101eb9190610b5d565b60405180910390f35b6802b5e3af16b1880000610233600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461088d90919063ffffffff16565b1015610274576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026b90610c2e565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103269190610c7d565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005b6000805490508110156104495760008082815481106103c3576103c2610cd3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044190610d02565b9150506103a1565b50600067ffffffffffffffff81111561046557610464610d4b565b5b6040519080825280602002602001820160405280156104935781602001602082028036833780820191505090505b50600090805190602001906104a9929190610969565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104d090610dab565b60006040518083038185875af1925050503d806000811461050d576040519150601f19603f3d011682016040523d82523d6000602084013e610512565b606091505b5050905080610556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054d90610e0c565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063d576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106c057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610676575b5050505050905060005b815181101561074b5760008282815181106106e8576106e7610cd3565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074390610d02565b9150506106ca565b50600067ffffffffffffffff81111561076757610766610d4b565b5b6040519080825280602002602001820160405280156107955781602001602082028036833780820191505090505b50600090805190602001906107ab929190610969565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107f290610dab565b60006040518083038185875af1925050503d806000811461082f576040519150601f19603f3d011682016040523d82523d6000602084013e610834565b606091505b505090508061084257600080fd5b5050565b600080828154811061085b5761085a610cd3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610899836108c9565b90506000670de0b6b3a764000085836108b29190610e2c565b6108bc9190610eb5565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561091257600080fd5b505afa158015610926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094a9190610f73565b5050509150506402540be400816109619190610fee565b915050919050565b8280548282559060005260206000209081019282156109e2579160200282015b828111156109e15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610989565b5b5090506109ef91906109f3565b5090565b5b80821115610a0c5760008160009055506001016109f4565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4082610a15565b9050919050565b610a5081610a35565b8114610a5b57600080fd5b50565b600081359050610a6d81610a47565b92915050565b600060208284031215610a8957610a88610a10565b5b6000610a9784828501610a5e565b91505092915050565b6000819050919050565b610ab381610aa0565b82525050565b6000602082019050610ace6000830184610aaa565b92915050565b6000819050919050565b6000610af9610af4610aef84610a15565b610ad4565b610a15565b9050919050565b6000610b0b82610ade565b9050919050565b6000610b1d82610b00565b9050919050565b610b2d81610b12565b82525050565b6000602082019050610b486000830184610b24565b92915050565b610b5781610a35565b82525050565b6000602082019050610b726000830184610b4e565b92915050565b610b8181610aa0565b8114610b8c57600080fd5b50565b600081359050610b9e81610b78565b92915050565b600060208284031215610bba57610bb9610a10565b5b6000610bc884828501610b8f565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610c18601283610bd1565b9150610c2382610be2565b602082019050919050565b60006020820190508181036000830152610c4781610c0b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c8882610aa0565b9150610c9383610aa0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cc857610cc7610c4e565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d0d82610aa0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d4057610d3f610c4e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d95600083610d7a565b9150610da082610d85565b600082019050919050565b6000610db682610d88565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610df6600b83610bd1565b9150610e0182610dc0565b602082019050919050565b60006020820190508181036000830152610e2581610de9565b9050919050565b6000610e3782610aa0565b9150610e4283610aa0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e7b57610e7a610c4e565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ec082610aa0565b9150610ecb83610aa0565b925082610edb57610eda610e86565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f0581610ee6565b8114610f1057600080fd5b50565b600081519050610f2281610efc565b92915050565b6000819050919050565b610f3b81610f28565b8114610f4657600080fd5b50565b600081519050610f5881610f32565b92915050565b600081519050610f6d81610b78565b92915050565b600080600080600060a08688031215610f8f57610f8e610a10565b5b6000610f9d88828901610f13565b9550506020610fae88828901610f49565b9450506040610fbf88828901610f5e565b9350506060610fd088828901610f5e565b9250506080610fe188828901610f13565b9150509295509295909350565b6000610ff982610f28565b915061100483610f28565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561104357611042610c4e565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110805761107f610c4e565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110bd576110bc610c4e565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110fa576110f9610c4e565b5b82820290509291505056fea2646970667358221220b113a6a7c7971e7b2248ce2e4bd0d102b263d5c8c42a487c4cbc6f6e3c60488a64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}