{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Get funds from users\n// Withdraw funds\n//Set a minimum funding value in USD\n\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n// \"constant\" keyword and \"immutable\" keyword help to reduce gas\n\nerror NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    // constructor function is the function that automatically gets called when we deploy our contract\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        // Want to be able to set a minimum fund amount in USD\n        //1. how do we send ETh to this contract?\n        //Payable keywird is added to the function to make it fir to transact funds\n\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"Didn't send enough\"\n        ); // 1e18 == 1*10 **18 == 1000000000000000000\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] += msg.value;\n        //msg.value is going to have 18 decimal places\n        // require keyword is a checker, it says: is msg.value greater than 1? if not it will revert and send the red message\n        // What is reverting?\n        // Undo any action before, and send remaining gas back\n    }\n\n    // the code in the comment below is used to get the get the version of interfaces\n    // function getVersion() public view returns (uint256) {\n    //     // ETH/USD price feed address of Sepolia Network.\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\n    //         0x694AA1769357215DE4FAC081bf1f309aDC325306\n    //     );\n    //     return priceFeed.version();\n    // }\n\n    function withdraw() public {\n        //for loop\n        //[1, 2, 3, 4]\n        /* starting index, ending index, step amount*/\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            //code\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n\n        funders = new address[](0); // this is to reset the array\n        /*\n        now to actually withdraw the funds\n        //transfer,\n        //msg.sender = address\n        //payable(msg.sender) = payable address\n        payable(msg.sender).transfer(address(this).balance);\n\n        //send\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);  \n        require(sendSuccess, \"Send failed\"); */\n\n        //call\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    modifier onlyOwner() {\n        //require(msg.sender == i_owner, \"Sender is not Owner!\");\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        } // this also saves gas\n        _;\n    }\n\n    // what if someone sends this contract ETH without calling the fund function?\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        // we are going to need two things\n        // the ABI and\n        // the address 0x447Fd5eC2D383091C22B8549cb231a3bAD6d3fAf\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\n        //     0x447Fd5eC2D383091C22B8549cb231a3bAD6d3fAf\n        // );\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // ETH in terms of USD\n        return uint256(price * 1e10); // 1**10 == 10000000000\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}